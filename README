****************
* Lab 01
* CS 321
* Febuary 04 2022
* Max Hartel
**************** 

OVERVIEW:
 A cache storage system that is implemented using a double linked list.
The system is capable of using a single cache or a two layer multi cache.


INCLUDED FILES:

 * Cache.java - source file
 * InvalidUserInputException.java - source file
 * MultiCache.java - source file
 * Test.java - source file
 * Node.java - source file
 * Encyclopedia.txt - input testing file
 * small.txt - input testing file
 * README - this file


COMPILING AND RUNNING:

 From the directory containing all source files, compile the
 driver class (and all dependencies) with the command:
### $ javac Test.java

 Run the compiled class file with the command:
### $ java Test 1 < cache size> < input textfile name> 

 or

### $ java Test 2 < 1st-level cache size> < 2nd-level cache size> < input textfile name>

 Console output will give the results after the program finishes.


PROGRAM DESIGN AND IMPORTANT CONCEPTS:

The first larger class is 'Cache.java'. Cache is based on a double linked list
and thus makes use of the 'Node.java' smaller class for its node objects. 
But Cache is not a standard doubly linked list, and has a couple differences. 
The largest one is that it has a set capacity that it takes as a parameter in its
constructor. If its length ever hits this capacity, the oldest element in the list
will be removed. Cache also has the functionality to move a selected element in the
list to the front of the list with its move(T data) method. Other noteable added 
functionality is  that the cache can be searched for an element using is contains()
method, and it keeps track of how many times it has been searched, and how many times
that search was successful.

The Second larger class is 'MultiCache.java'. MultiCache is used for when a two layer
cache system is needed. This class takes the capacity for each layer of a two layer
cache system as it's parameters and creates two instances of the Cache class in its constructor
. It also contains the method Multisearch(T data). MultiSearch can be used to search the 
two layer cache system for a value. If a search in the first layer of the cache system is 
successful, the searched for data is then moved to the top of both layers. If the first 
layer search is not successful, then the second layer of the MultiCache system is searched. 
(This Cache instance is usally much greater in capacity than the first instance) If that search 
is succsessful, then the searched for data is moved to the front of the second layer Cache and 
the targeted data is added to the front of the first layer Cache. If both searches are 
unsuccessful, then the searched for data is added to the front of both Cache instances.

The third larger class is 'Test.java'. Test is the only class in the program with 
a main method and is thus the driver class. Test takes in the command line
arguments from the user as can be seen above in the 'Compiling and Running' 
section. From those arguments Test will recieve a text file, Test will then take that
text file and parse through it word by word. Those individual words are the data points
that will be stored and searched for in our Cache instances. The Test class will then
create a single Cache instance or a MultiCache instace based on the user specifications in
the command line args. The data points will then be searched for in the Cache(s) until
all of the words in the text file have been searched. The Test class will then display the 
stats for the Cache(s) search results to the console. This will include number of searches,
number of successful searches(hits), and hit to miss ratio for the Cache(s) searches.

The other minor class that is included is a custom Exception for when the user enters
invalid arguments to the Test class. The Exception displays a helpful error message 
that informs the user on the inp[ut format.


TESTING:

 How did you test your program to be sure it works and meets all of the
 requirements? What was the testing strategy? What kinds of tests were run?
 Can your program handle bad input? Is your program  idiot-proof? How do you 
 know? What are the known issues / bugs remaining in your program?


To test this program I ran the program with inputs to which I knew the 
correct output for, then I compared the output of the program with the 
expected results to verify functionality. The files used for testing 
are included below, and can be found at: /home/MINLONG/repos/cs321/lab1files/
on the onyx system.

* Encyclopedia.txt  - sample input file
* result1k2k - expected results file
* result1k5k - expected results file
* result.small - expected results file
* small.txt - sample input file

My program is guarded against bad user input with the custom Exception
'InvalidUserInputException' for when the user enters
invalid arguments to the Test class. The Exception displays a helpful error message 
that informs the user on the input format.

Upon running my Program with the sample input files and comparing my output
from the program to the expected output file, I camn confirm that the program
has full functionality for the tests listed above. However there is always a 
chance that more issues could be discovered upon more extensive testing.



DISCUSSION:
 
 This was great project to get back into seriously programming with after taking
about a month off for the winter holidays. Through working on this project I was able
to knock the rust off of my java skills. That being said this project was by no means 
a walk in the park for an introduction. 

The instructions for this project were much less specific than instructions
I had been given for projects in previous classes. This led to some initial
challenges in the architecture  of the program. It took me a while to figure 
out what responibilities should be handled by the Cache class vs the Test 
class. It it took longer still for me to realize that having a MultiCache
class would be benifitial to the functionality of the program. 

The main thorn in my side throughout this project was a bug in the 
contains method of my Cache class. I initially had the method set up
so that it would automatically increase the number of hits for the cache if 
it conducted a successful search of the cache. But the problem there was that
the contains method was used internally in my Remove() method of that Cache class
so that was messing with my numbers. But once I got that bug fixed eventually,
the project went smoothly for the most part. 
----------------------------------------------------------------------------